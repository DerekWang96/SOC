
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.*;
import DataStruct.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MipsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MipsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MipsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MipsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\004\005\000\002\005\004\000\002\005\003\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\007\004\000" +
    "\002\010\004\000\002\011\004\000\002\012\004\000\002" +
    "\013\004\000\002\014\004\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\003\000\002\017\005" +
    "\000\002\017\006\000\002\020\004\000\002\020\004\000" +
    "\002\020\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\004\000\002\025\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\026\003\000\002\026\003" +
    "\000\002\023\010\000\002\023\010\000\002\023\011\000" +
    "\002\023\006\000\002\022\010\000\002\022\006\000\002" +
    "\022\010\000\002\022\004\000\002\022\004\000\002\022" +
    "\006\000\002\022\003\000\002\022\003\000\002\022\006" +
    "\000\002\022\003\000\002\022\004\000\002\022\003\000" +
    "\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\006\007\006\010\007\001\002\000\010\002" +
    "\000\007\006\010\007\001\002\000\004\002\212\001\002" +
    "\000\004\004\132\001\002\000\006\004\012\045\013\001" +
    "\002\000\010\002\ufffc\007\ufffc\010\ufffc\001\002\000\010" +
    "\002\ufffd\007\ufffd\010\ufffd\001\002\000\046\013\043\014" +
    "\024\015\021\016\042\017\037\020\026\021\040\022\027" +
    "\023\032\024\041\025\023\026\017\027\022\030\036\031" +
    "\015\032\033\033\020\034\025\001\002\000\004\004\014" +
    "\001\002\000\046\013\043\014\024\015\021\016\042\017" +
    "\037\020\026\021\040\022\027\023\032\024\041\025\023" +
    "\026\017\027\022\030\036\031\015\032\033\033\020\034" +
    "\025\001\002\000\004\044\123\001\002\000\054\002\uffdd" +
    "\007\uffdd\010\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\001\002\000\004\044\120\001\002\000\004\044\115" +
    "\001\002\000\004\044\112\001\002\000\004\004\uffc5\001" +
    "\002\000\004\004\uffca\001\002\000\004\044\105\001\002" +
    "\000\006\013\064\045\065\001\002\000\004\044\103\001" +
    "\002\000\004\044\102\001\002\000\004\004\101\001\002" +
    "\000\004\004\100\001\002\000\004\004\uffc9\001\002\000" +
    "\004\044\073\001\002\000\056\002\uffdc\004\072\007\uffdc" +
    "\010\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\001" +
    "\002\000\054\002\uffe1\007\uffe1\010\uffe1\013\043\014\024" +
    "\015\021\016\042\017\037\020\026\021\040\022\027\023" +
    "\032\024\041\025\023\026\017\027\022\030\036\031\015" +
    "\032\033\033\020\034\025\001\002\000\004\044\060\001" +
    "\002\000\004\044\057\001\002\000\004\044\054\001\002" +
    "\000\004\004\uffc7\001\002\000\004\044\047\001\002\000" +
    "\004\006\046\001\002\000\004\004\045\001\002\000\054" +
    "\002\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\001\002\000\056\002\uffda\004\uffda\007\uffda" +
    "\010\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\001" +
    "\002\000\004\005\050\001\002\000\004\044\051\001\002" +
    "\000\004\005\052\001\002\000\004\045\053\001\002\000" +
    "\004\004\uffce\001\002\000\004\005\055\001\002\000\004" +
    "\044\056\001\002\000\004\004\uffcb\001\002\000\004\004" +
    "\uffcd\001\002\000\004\005\061\001\002\000\004\044\062" +
    "\001\002\000\004\005\063\001\002\000\006\013\064\045" +
    "\065\001\002\000\006\004\uffd5\011\uffd5\001\002\000\006" +
    "\004\uffd6\011\uffd6\001\002\000\004\004\uffd4\001\002\000" +
    "\054\002\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\001\002\000\056\002\uffdf\004\071\007" +
    "\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\001\002\000\054\002\uffde\007\uffde\010\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\001\002\000\054\002\uffdb" +
    "\007\uffdb\010\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\001\002\000\004\005\074\001\002\000\004\044\075" +
    "\001\002\000\004\005\076\001\002\000\006\013\064\045" +
    "\065\001\002\000\004\004\uffd3\001\002\000\054\002\uffd7" +
    "\007\uffd7\010\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\001\002\000\054\002\uffd9\007\uffd9\010\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001\002\000\004\004" +
    "\uffc6\001\002\000\004\004\uffcc\001\002\000\004\004\uffc4" +
    "\001\002\000\004\005\106\001\002\000\004\044\107\001" +
    "\002\000\004\005\110\001\002\000\004\044\111\001\002" +
    "\000\004\004\uffd0\001\002\000\004\005\113\001\002\000" +
    "\004\044\114\001\002\000\004\004\uffcf\001\002\000\004" +
    "\005\116\001\002\000\006\013\064\045\065\001\002\000" +
    "\004\004\uffd1\001\002\000\004\005\121\001\002\000\004" +
    "\044\122\001\002\000\004\004\uffc8\001\002\000\004\005" +
    "\124\001\002\000\006\013\064\045\065\001\002\000\004" +
    "\011\126\001\002\000\004\044\127\001\002\000\004\012" +
    "\130\001\002\000\004\004\uffd2\001\002\000\054\002\uffe2" +
    "\007\uffe2\010\uffe2\013\043\014\024\015\021\016\042\017" +
    "\037\020\026\021\040\022\027\023\032\024\041\025\023" +
    "\026\017\027\022\030\036\031\015\032\033\033\020\034" +
    "\025\001\002\000\004\013\134\001\002\000\026\002\ufff9" +
    "\007\ufff9\010\ufff9\013\ufff9\035\150\036\142\037\152\040" +
    "\137\041\141\042\143\001\002\000\004\006\175\001\002" +
    "\000\012\002\ufffb\007\ufffb\010\ufffb\013\134\001\002\000" +
    "\026\002\ufffa\007\ufffa\010\ufffa\013\ufffa\035\150\036\142" +
    "\037\152\040\137\041\141\042\143\001\002\000\004\045" +
    "\154\001\002\000\004\004\173\001\002\000\004\045\154" +
    "\001\002\000\004\043\160\001\002\000\004\045\170\001" +
    "\002\000\004\004\167\001\002\000\004\004\166\001\002" +
    "\000\004\004\165\001\002\000\004\004\164\001\002\000" +
    "\004\043\160\001\002\000\004\004\157\001\002\000\004" +
    "\045\154\001\002\000\006\004\uffea\005\155\001\002\000" +
    "\006\004\uffe3\005\uffe3\001\002\000\004\045\156\001\002" +
    "\000\006\004\uffe4\005\uffe4\001\002\000\026\002\uffee\007" +
    "\uffee\010\uffee\013\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\001\002\000\006\004\uffe5\005\uffe5\001" +
    "\002\000\006\004\uffec\005\162\001\002\000\004\043\163" +
    "\001\002\000\006\004\uffe6\005\uffe6\001\002\000\026\002" +
    "\ufff1\007\ufff1\010\ufff1\013\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\001\002\000\026\002\ufff2\007" +
    "\ufff2\010\ufff2\013\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\001\002\000\026\002\uffed\007\uffed\010" +
    "\uffed\013\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\001\002\000\026\002\ufff0\007\ufff0\010\ufff0\013" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\001\002\000\004\004\uffe7\001\002\000\006\004\uffeb\005" +
    "\162\001\002\000\006\004\uffe8\005\155\001\002\000\026" +
    "\002\uffef\007\uffef\010\uffef\013\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\001\002\000\006\004\uffe9" +
    "\005\155\001\002\000\016\035\150\036\142\037\152\040" +
    "\137\041\141\042\143\001\002\000\004\004\211\001\002" +
    "\000\004\004\210\001\002\000\004\004\207\001\002\000" +
    "\004\004\206\001\002\000\004\004\205\001\002\000\004" +
    "\004\204\001\002\000\026\002\ufff4\007\ufff4\010\ufff4\013" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\001\002\000\026\002\ufff6\007\ufff6\010\ufff6\013\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\001\002" +
    "\000\026\002\ufff8\007\ufff8\010\ufff8\013\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\001\002\000\026" +
    "\002\ufff3\007\ufff3\010\ufff3\013\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\001\002\000\026\002\ufff7" +
    "\007\ufff7\010\ufff7\013\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\001\002\000\026\002\ufff5\007\ufff5" +
    "\010\ufff5\013\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\001\002\000\004\002\001\001\002\000\010" +
    "\002\uffff\007\uffff\010\uffff\001\002\000\010\002\ufffe\007" +
    "\ufffe\010\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\012\002\004\003\003\004\007\017\010\001" +
    "\001\000\006\004\212\017\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\130\021\015\022\027\023\043" +
    "\024\030\025\033\001\001\000\002\001\001\000\016\020" +
    "\034\021\015\022\027\023\043\024\030\025\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\066\022\027\023\043\024\030\025\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\066\022\027\023\043\024\030\025\067\001\001" +
    "\000\006\005\134\006\132\001\001\000\016\007\145\010" +
    "\143\011\146\012\137\013\150\014\144\001\001\000\002" +
    "\001\001\000\004\006\135\001\001\000\016\007\145\010" +
    "\143\011\146\012\137\013\150\014\144\001\001\000\004" +
    "\016\173\001\001\000\002\001\001\000\004\016\171\001" +
    "\001\000\004\015\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\160\001\001\000\002\001\001\000\004" +
    "\016\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\200\010\176\011\201\012\175\013\202\014\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MipsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MipsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MipsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error( Symbol cur_token ) {
        String msg  = "Syntax Error at line: " + (cur_token.left+1); 
        msg         += " col: " + (cur_token.right+1) + ".";
        report_error( msg, null );
    }
//    public void unrecovered_syntax_error( Symbol cur_token ) throws java.lang.Exception {
//        super.unrecovered_syntax_error( cur_token );
//    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MipsParser$actions {
  private final MipsParser parser;

  /** Constructor */
  CUP$MipsParser$actions(MipsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MipsParser$do_action_part00000000(
    int                        CUP$MipsParser$act_num,
    java_cup.runtime.lr_parser CUP$MipsParser$parser,
    java.util.Stack            CUP$MipsParser$stack,
    int                        CUP$MipsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MipsParser$result;

      /* select the action based on the action number */
      switch (CUP$MipsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		RESULT = start_val;
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MipsParser$parser.done_parsing();
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= mipsprogram 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		MipsAbstractSyntax m = (MipsAbstractSyntax)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  RESULT = m; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mipsprogram ::= mipsprogram datasection 
            {
              MipsAbstractSyntax RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		MipsAbstractSyntax mas = (MipsAbstractSyntax)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		DataSection ds = (DataSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  mas.dataSections.add(ds);
                    RESULT = mas; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mipsprogram ::= mipsprogram textsection 
            {
              MipsAbstractSyntax RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		MipsAbstractSyntax mas = (MipsAbstractSyntax)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		TextSection ts = (TextSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  mas.textSections.add(ts);
                    RESULT = mas; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mipsprogram ::= textsection 
            {
              MipsAbstractSyntax RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		TextSection ts = (TextSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  MipsAbstractSyntax mas = new MipsAbstractSyntax();
                    mas.textSections.add(ts);
                    RESULT = mas;  
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mipsprogram ::= datasection 
            {
              MipsAbstractSyntax RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		DataSection ds = (DataSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  MipsAbstractSyntax mas = new MipsAbstractSyntax();
                    mas.dataSections.add(ds);
                    RESULT = mas;  
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // datasection ::= STARTDATA EOL data 
            {
              DataSection RESULT =null;
		int fulldleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int fulldright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		DataSection fulld = (DataSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 System.out.println("[Parser]: find datasection " + " at line: " + fulldleft); 
                      RESULT = fulld; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datasection",2, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // data ::= data datadecl 
            {
              DataSection RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataSection ds = (DataSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		DataDeclaration dc = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        ds.addData( dc );
                        RESULT = ds;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("data",3, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // data ::= datadecl 
            {
              DataSection RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		DataDeclaration dc = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        DataSection ds = new DataSection();
                        ds.addData( dc );
                        RESULT = ds;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("data",3, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // datadecl ::= LABEL COLON dataasciiz EOL 
            {
              DataDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 System.out.println("[Parser]: find data declaration "+l + " at line: " + lleft); 
                   DataDeclaration decl = new DataDeclaration(l,lleft,lright );
                   decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datadecl ::= LABEL COLON dataascii EOL 
            {
              DataDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 System.out.println("[Parser]: find data declaration "+l + " at line: " + lleft); 
                   DataDeclaration decl = new DataDeclaration(l,lleft,lright );
                   decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // datadecl ::= LABEL COLON databyte EOL 
            {
              DataDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 System.out.println("[Parser]: find data declaration "+l + " at line: " + lleft); 
                   DataDeclaration decl = new DataDeclaration(l,lleft,lright );
                   decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // datadecl ::= LABEL COLON datahalfword EOL 
            {
              DataDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 System.out.println("[Parser]: find data declaration "+l + " at line: " + lleft); 
                   DataDeclaration decl = new DataDeclaration(l,lleft,lright );
                   decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datadecl ::= LABEL COLON dataword EOL 
            {
              DataDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 System.out.println("[Parser]: find data declaration "+l + " at line: " + lleft); 
                   DataDeclaration decl = new DataDeclaration(l,lleft,lright );
                   decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // datadecl ::= LABEL COLON dataspace EOL 
            {
              DataDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 System.out.println("[Parser]: find data declaration "+l + " at line: " + lleft); 
                   DataDeclaration decl = new DataDeclaration(l,lleft,lright );
                   decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // datadecl ::= datadecl dataasciiz EOL 
            {
              DataDeclaration RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		DataDeclaration decl = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // datadecl ::= datadecl databyte EOL 
            {
              DataDeclaration RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		DataDeclaration decl = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // datadecl ::= datadecl dataascii EOL 
            {
              DataDeclaration RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		DataDeclaration decl = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // datadecl ::= datadecl datahalfword EOL 
            {
              DataDeclaration RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		DataDeclaration decl = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // datadecl ::= datadecl dataword EOL 
            {
              DataDeclaration RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		DataDeclaration decl = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datadecl ::= datadecl dataspace EOL 
            {
              DataDeclaration RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		DataDeclaration decl = (DataDeclaration)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		DataItem d = (DataItem)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 decl.addData(d);
                   RESULT = decl;
                
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dataasciiz ::= DASCIIZ strlist 
            {
              DataItem RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		ArrayList<String> s = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 System.out.println("[Parser]: find data "+s + " at line: " + sleft);  
                      RESULT = new DataItem( sleft, sright, s, true ); 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("dataasciiz",5, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dataascii ::= DASCII strlist 
            {
              DataItem RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		ArrayList<String> s = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		System.out.println("[Parser]: find data "+s + " at line: " + sleft);  
                    RESULT = new DataItem( sleft, sright, s, false ); 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("dataascii",6, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // databyte ::= DBYTE immlist 
            {
              DataItem RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		ArrayList<Long> i = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		System.out.println("[Parser]: find data "+i + " at line: " + ileft); 
                     RESULT = new DataItem( ileft, iright, i, 8 ); 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("databyte",7, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datahalfword ::= DHALFWORD immlist 
            {
              DataItem RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		ArrayList<Long> i = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		System.out.println("[Parser]: find data "+i + " at line: " + ileft);  
                    RESULT = new DataItem( ileft, iright, i, 16 ); 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("datahalfword",8, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dataword ::= DWORD immlist 
            {
              DataItem RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		ArrayList<Long> i = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		System.out.println("[Parser]: find data "+i + " at line: " + ileft);  
                    RESULT = new DataItem( ileft, iright, i, 32 ); 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("dataword",9, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dataspace ::= DSPACE IMM 
            {
              DataItem RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		System.out.println("[Parser]: find data "+i + " at line: " + ileft);  
                    RESULT = new DataItem( ileft, iright, (int)i.longValue() ); 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("dataspace",10, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // strlist ::= strlist COMMA STRLITERAL 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 list.add(s); RESULT = list; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("strlist",11, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // strlist ::= STRLITERAL 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 ArrayList<String> l = new ArrayList<String>(); l.add(s); RESULT = l; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("strlist",11, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // immlist ::= immlist COMMA IMM 
            {
              ArrayList<Long> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		ArrayList<Long> list = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 list.add(i); RESULT = list; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("immlist",12, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // immlist ::= IMM 
            {
              ArrayList<Long> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 ArrayList<Long> l = new ArrayList<Long>(); l.add(i); RESULT = l; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("immlist",12, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // textsection ::= STARTTEXT EOL textdata 
            {
              TextSection RESULT =null;
		int tdfullleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int tdfullright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		TextSection tdfull = (TextSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  System.out.println("[Parser]: find text section " + " at line: " + tdfullleft); 
                      RESULT = tdfull; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textsection",13, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // textsection ::= STARTTEXT IMM EOL textdata 
            {
              TextSection RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int tdfullleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int tdfullright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		TextSection tdfull = (TextSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 System.out.println("[Parser]: find text section " + " at line: " + ileft); 
                    tdfull.setAddress(i);
                    RESULT = tdfull; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textsection",13, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // textdata ::= textdata mipsinst 
            {
              TextSection RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		TextSection td = (TextSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  td.addInstruction( i );
                        RESULT = td;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textdata",14, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // textdata ::= textdata labeldecl 
            {
              TextSection RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		TextSection td = (TextSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  td.addLabel( l );
                        RESULT = td;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textdata",14, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // textdata ::= textdata labeldecl EOL 
            {
              TextSection RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		TextSection td = (TextSection)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		  td.addLabel( l );
                        RESULT = td;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textdata",14, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // textdata ::= mipsinst 
            {
              TextSection RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  TextSection t = new TextSection(); 
                        t.addInstruction( i );
                        RESULT = t;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textdata",14, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // textdata ::= labeldecl 
            {
              TextSection RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  TextSection t = new TextSection(); 
                        t.addLabel( l );
                        RESULT = t;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textdata",14, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // textdata ::= labeldecl EOL 
            {
              TextSection RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		  TextSection t = new TextSection(); 
                        t.addLabel( l );
                        RESULT = t;
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("textdata",14, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // labeldecl ::= LABEL COLON 
            {
              Label RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		
                        System.out.println("[Parser]: find var|subpro declaration "+l + " at line: " + lleft);
                        RESULT = new Label( lleft, lright, l, 0 );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("labeldecl",19, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mipsinst ::= rinst EOL 
            {
              Instruction RESULT =null;
		int rileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int riright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		RInstruction ri = (RInstruction)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 RESULT = ri; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("mipsinst",15, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mipsinst ::= iinst EOL 
            {
              Instruction RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		IInstruction ii = (IInstruction)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 RESULT = ii; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("mipsinst",15, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mipsinst ::= jinst EOL 
            {
              Instruction RESULT =null;
		int jileft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int jiright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		JInstruction ji = (JInstruction)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		 RESULT = ji; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("mipsinst",15, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // imm_or_label ::= IMM 
            {
              Object RESULT =null;
		int immleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Long imm = (Long)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 RESULT = imm; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("imm_or_label",20, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // imm_or_label ::= LABEL 
            {
              Object RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		 RESULT = label; 
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("imm_or_label",20, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // iinst ::= IOPER REG COMMA REG COMMA imm_or_label 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Iinst "+op + " at line: " + opleft);
                        if( iol instanceof String ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       ((Long)iol).longValue() );
                        }
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("iinst",17, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // iinst ::= IBRANCHOP REG COMMA REG COMMA imm_or_label 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Iinst "+op + " at line: " + opleft);
                        if( iol instanceof String ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       ((Long)iol).longValue() );
                        }
                        if( RESULT == null ) System.err.println( "RESULT NOT SET" );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("iinst",17, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // iinst ::= IMEMOPER REG COMMA imm_or_label LPAREN REG RPAREN 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-6)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-6)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		
                        System.out.println("[Parser]: find Iinst "+op + " at line: " + opleft);
                        if( iol instanceof String ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       ((Long)iol).longValue() );
                        }
                        if( RESULT == null ) System.err.println( "RESULT NOT SET" );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("iinst",17, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-6)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // iinst ::= ISINGREGOP REG COMMA imm_or_label 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int regleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer reg = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Iinst "+op + " at line: " + opleft);
                        int rsNum = 0;
                        int rtNum = 0;
                        switch(op){
                        case "lui": 
                        rsNum = 0;
                        rtNum = reg.intValue();
                        break;
                        case "bgtz": case "blez":case "bltz":
                        rsNum = reg.intValue();
                        rtNum = 0;
                        break;
                        case "bgez": 
                        rsNum = reg.intValue();
                        rtNum = 1;
                        break; 
                        case "bgezal": 
                        rsNum = reg.intValue();
                        rtNum = 17;
                        break; 
                        case "bltzal": 
                        rsNum = reg.intValue();
                        rtNum = 16;
                        break;                         
                        }
                        if( iol instanceof String ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rsNum,
                                                       rtNum,
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rsNum,
                                                       rtNum,
                                                       ((Long)iol).longValue() );
                        }
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("iinst",17, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rinst ::= ROPER REG COMMA REG COMMA REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);                      
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   rs.intValue(),
                                                   rt.intValue(),
                                                   rd.intValue(),
                                                   0 );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rinst ::= RMDOPER REG COMMA REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   rs.intValue(),
                                                   rt.intValue(),
                                                   0,
                                                   0
                                                  );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rinst ::= RSOPER REG COMMA REG COMMA IMM 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-4)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int shamtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int shamtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Long shamt = (Long)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   0,
                                                   rt.intValue(),
                                                   rd.intValue(),
                                                   shamt.longValue() );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-5)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rinst ::= RTFOPER REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   0,
                                                   0,
                                                   rd.intValue(),
                                                   0
                                                    );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rinst ::= RTTOPER REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		  
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   0,
                                                   rs.intValue(),
                                                   0,
                                                   0
                                                  );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rinst ::= RSPOPER REG COMMA REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   0,
                                                   rt.intValue(),
                                                   rd.intValue(),
                                                   0
                                                  );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rinst ::= ERET 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   "ERET",
                                                   16,
                                                   0,
                                                   0,
                                                   0 );
                   
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rinst ::= BREAK 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   "BREAK",
                                                   0,
                                                   0,
                                                   0,
                                                   0 );
                   
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rinst ::= JALR REG COMMA REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-2)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   rs.intValue(),
                                                   0,
                                                   rd.intValue(),
                                                   0
                                                  );
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-3)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rinst ::= SYSCALL 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   "SYSCALL",
                                                   0,
                                                   0,
                                                   0,
                                                   0 );
                   
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rinst ::= RJROPER REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   "JR",
                                                   rs.intValue(),
                                                   0,
                                                   0,
                                                   0 );
                   
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rinst ::= NOP 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Rinst "+op + " at line: " + opleft);
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   "NOP",
                                                   0,
                                                   0,
                                                   0,
                                                   0 );
                   
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("rinst",16, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // jinst ::= JOPER imm_or_label 
            {
              JInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$MipsParser$stack.peek()).value;
		
                        System.out.println("[Parser]: find Jinst "+op + " at line: " + opleft);
                        if( iol instanceof String ) {
                            RESULT = new JInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new JInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       ((Long)iol).longValue() );
                        }
                    
              CUP$MipsParser$result = parser.getSymbolFactory().newSymbol("jinst",18, ((java_cup.runtime.Symbol)CUP$MipsParser$stack.elementAt(CUP$MipsParser$top-1)), ((java_cup.runtime.Symbol)CUP$MipsParser$stack.peek()), RESULT);
            }
          return CUP$MipsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MipsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MipsParser$do_action(
    int                        CUP$MipsParser$act_num,
    java_cup.runtime.lr_parser CUP$MipsParser$parser,
    java.util.Stack            CUP$MipsParser$stack,
    int                        CUP$MipsParser$top)
    throws java.lang.Exception
    {
              return CUP$MipsParser$do_action_part00000000(
                               CUP$MipsParser$act_num,
                               CUP$MipsParser$parser,
                               CUP$MipsParser$stack,
                               CUP$MipsParser$top);
    }
}

}
